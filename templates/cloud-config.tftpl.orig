#cloud-config
output: {all: '| tee -a /var/log/cloud-init-ords.log'}
package_upgrade: false
packages:
  - jdk-17
  - ords
  - sqlcl
write_files:
- path: /etc/ords.conf.custom
  permissions: '0644'
  content: |
    APP_VM_OPTS=-Xms1024m
    ORDS_BASE=/opt/oracle/ords
    ORDS_CONFIG=/home/oracle/ords/config
  append: false
  defer: true
- path: /home/oracle/ords/config/databases/default/pool.xml
  permissions: '0644'
  content: |
    <?xml version="1.0" encoding="UTF-8" standalone="no"?>
    <!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
    <properties>
    <entry key="db.connectionType">customurl</entry>
    <entry key="db.customURL">jdbc:oracle:thin:@${db_conn}</entry>
    <entry key="db.username">ORDS_PUBLIC_USER_OCI</entry>
    <entry key="plsql.gateway.mode">proxied</entry>
    </properties>
  append: false
  defer: true
- path: /home/oracle/ords/config/global/settings.xml
  permissions: '0644'
  content: |
    <?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
    <properties>
    <comment>Default created by IaC</comment>
    <entry key="database.api.enabled">false</entry>
    <entry key="feature.sdw">false</entry>
    <entry key="jdbc.InitialLimit">10</entry>
    <entry key="jdbc.MaxLimit">100</entry>
    <entry key="restEnabledSql.active">false</entry>
    <entry key="security.httpsHeaderCheck">X-Forwarded-Proto: https</entry>
    <entry key="standalone.context.path">/ords</entry>
    <entry key="standalone.http.port">8080</entry>
    <entry key="standalone.static.context.path">/i</entry>
    </properties>
  append: false
  defer: true
- path: /home/oracle/ords/setup.sql
  permissions: '0755'
  content: |
    set serveroutput on size 99999 feedback off timing on linesize 180 echo on
    whenever sqlerror continue
    DECLARE
      L_USER VARCHAR2(255);
    BEGIN
      BEGIN
        SELECT USERNAME INTO L_USER FROM DBA_USERS WHERE USERNAME='ORDS_PUBLIC_USER_OCI';
        execute immediate 'ALTER USER "ORDS_PUBLIC_USER_OCI" IDENTIFIED BY "&1"';
      EXCEPTION WHEN NO_DATA_FOUND THEN
        execute immediate 'CREATE USER "ORDS_PUBLIC_USER_OCI" IDENTIFIED BY "&1"';
      END;
      BEGIN
        SELECT USERNAME INTO L_USER FROM DBA_USERS WHERE USERNAME='ORDS_PLSQL_GATEWAY_OCI';
        execute immediate 'ALTER USER "ORDS_PLSQL_GATEWAY_OCI" NO AUTHENTICATION;
      EXCEPTION WHEN NO_DATA_FOUND THEN
        execute immediate 'CREATE USER "ORDS_PLSQL_GATEWAY_OCI" NO AUTHENTICATION;
      END;
    END;
    /
    GRANT CONNECT TO ORDS_PUBLIC_USER_OCI;
    ALTER USER ORDS_PUBLIC_USER_OCI PROFILE ORA_APP_PROFILE;
    GRANT CONNECT TO ORDS_PLSQL_GATEWAY_OCI;
    ALTER USER ORDS_PLSQL_GATEWAY_OCI GRANT CONNECT THROUGH ORDS_PUBLIC_USER_OCI;
    BEGIN
      ORDS_ADMIN.PROVISION_RUNTIME_ROLE (
        p_user => 'ORDS_PUBLIC_USER_OCI',
        p_proxy_enabled_schemas => TRUE
      );
    END;
    /
    BEGIN
      ORDS_ADMIN.CONFIG_PLSQL_GATEWAY (
        p_runtime_user => 'ORDS_PUBLIC_USER_OCI',
        p_plsql_gateway_user => 'ORDS_PLSQL_GATEWAY_OCI'
      );
    END;
    /
    DECLARE
      l_cdn  VARCHAR2(255);
    BEGIN
      SELECT images_version INTO l_cdn
        FROM APEX_PATCHES
       WHERE is_bundle_patch = 'Yes'
       ORDER by patch_version desc
       FETCH first 1 rows only;
      apex_instance_admin.set_parameter(
          p_parameter => 'IMAGE_PREFIX',
          p_value     => 'https://static.oracle.com/cdn/apex/'||l_cdn||'/'
      );
    END;
    /
    BEGIN
        apex_instance_admin.set_parameter('RESTRICT_DEV_HEADER', 'APEX-Public-Access');
    END;
    /
    The below is used to ensure ADMIN password in tfstate isn't a usable password
    ALTER USER ADMIN PASSWORD EXPIRE;
    QUIT
  append: false
  defer: true
- path: /home/oracle/ords/setup.sh
  permissions: '0755'
  content: |
    #!/bin/env bash
    declare -rx ORDS_CONFIG="/home/oracle/ords/config"
    declare -r ADMIN_PASS="$1"
    declare -r ADB_CONSTR="$2"

    # Generate a password for the ORDS users (loop to avoid entropy too low issues)
    for i in {1..10}; do
      declare ords_pwd=$(pwmake 80)
      if (( $? == 0 )) && [[ -n $ords_pwd ]]; then
        break
      fi
    done

    # Create the password wallet file
    ords --config $ORDS_CONFIG config secret --password-stdin db.password <<< "$ords_pwd"

    # Setup the ORDS user
    sql admin/"$ADMIN_PASS"@"$ADB_CONSTR" @/home/oracle/ords/setup.sql $ords_pwd

    # Post Setup
    systemctl stop firewalld.service
    firewall-offline-cmd --zone=public --add-port 8080/tcp
    systemctl start firewalld.service
    chown -R oracle:oinstall /home/oracle/ords
    /bin/cp /etc/ords.conf.custom /etc/ords.conf
    systemctl restart ords.service
    systemctl enable ords.service
  append: false
  defer: true
runcmd:
  - /home/oracle/ords/setup.sh '${db_password}' '${db_conn}'
